        program Solitones
!
!       Este programa simulará el sistema de FPUT. Si cambias la alpha, tambien cambiala en las subrutinas. npmax=N
!       Importante: Genera los  datos para la visualización de los solitones. Lleva las energías para identificar las recurrencias.
!       u..i=u(i+1)+u(i-1)-2ui +alpha[ (u(i+1)-ui)^2 -(u(i-1) -ui)^2 ]
!        
        use def_precision
!
        implicit none
        !Modalidades: 1: modo modo, 2: modos mod y mod+1 a medias, 3: kink, 4: especial
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
        integer(kind=mi_entero), parameter :: npmax=32, ktot=11500000, kpaso=500, i1=6, i2=26
        integer(kind=mi_entero), parameter :: modalidad=1, modo=1
!        
        integer(kind=mi_entero) :: i, j, kk, kcuenta
!        
        real(kind=mi_doble), parameter :: dt=1.d-03, amp=1.d00, pi=3.1415926535898d00, alfa=0.25d00, anc=0.5d00
        real(kind=mi_doble) :: t,npdb, dobmod,ak,akp,ek, aux1, aux2, aux3, aux4, omega2
!        
        real(kind=mi_doble), dimension(0:npmax+1) :: u,y,up,yp
        real(kind=mi_doble), dimension(0:npmax+1) :: k1u,k2u,k3u,k4u,k1y,k2y,k3y,k4y
        character(len=200) :: name
        character(len=6) :: str
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!       Sistema de guardado
        name='C:\Users\aleja\OneDrive - Universidade de Santiago de Compostela\Documentos\4 curso\TFG\Programas'
        name=trim(name)//'\Datos\Solitones_alpha\N'//trim(str(npmax))//'\datos_alpha'
        if (alfa<1.d00) then
          name=trim(name)//'_'//trim(str(int(alfa*100.d00)))
        else
          name=trim(name)//trim(str(int(alfa)))
        end if

        if (amp<1.d00) then
           name=trim(name)//'_a_'//trim(str(int(amp*100.d00)))
        else
           name=trim(name)//'_a'//trim(str(int(amp)))
        end if
        
        if (modalidad==1) then
            name=trim(name)//'mod'//trim(str(modo))
        else if (modalidad==2) then
            name=trim(name)//'suma'//trim(str(modo))//'_'//trim(str(modo+1))
        else if (modalidad==3) then
            name=trim(name)//'kink'
        else if (modalidad==4) then
            name=trim(name)//'esp'
        end if
        
        name=trim(name)//'.dat'
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        t=0.d00
        kcuenta=0
        ek=0.d00
        npdb=dble(npmax+1)
        dobmod=dble(modo)
        omega2=4.d00*(sin( dble(modo)*pi/(2*npdb) )**2)
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!       Cond iniciales
        y=0.d00
        u=0.d00
        ak=0.d00
        akp=0.d00
        
        if (modalidad==1) then
            do i=1,npmax
              u(i)=amp*sin(dobmod*pi*dble(i)/npdb)
            end do
        else if (modalidad==2) then
            do i=1,npmax
              u(i)=0.5d00*amp*(sin(dobmod*pi*dble(i)/npdb)+sin( (dobmod+1.d00)*pi*dble(i)/npdb ))
            end do
        else if (modalidad==3) then
            aux3=sinh(anc)*sinh(anc)
            aux4=exp(-anc)
            do i=0,npmax+1
              aux1=dble(i-i1)
              aux2=dble(i-i2)

              u(i)=-log((1.d00+exp(2.d00*anc*(aux1-1.d00)))/(1.d00+exp(2.d00*anc*aux1)))
              u(i)=u(i)+log((1.d00+exp(2.d00*anc*(aux2-1.d00)))/(1.d00+exp(2.d00*anc*aux2)))
              y(i)=1.d00/(cosh(anc*aux1)*(exp(-anc*aux1)+exp(anc*aux1)*aux4*aux4))
              y(i)=y(i)-1.d00/(cosh(anc*aux2)*(exp(-anc*aux2)+exp(anc*aux2)*aux4*aux4))
            end do
            u=u*0.5d00*amp/alfa
            y=y*aux3*aux4/alfa
        else if (modalidad==4) then
            do i=1,npmax
              aux1=dble(i)
              u(i)=3.d00+4.d00*cosh(2.d00*aux1/npdb)+cosh(4.d00*aux1/npdb)
              u(i)=u(i)/((3.d00*cosh(aux1/npdb)+cosh(3.d00*aux1/npdb))*(3.d00*cosh(aux1/npdb)+cosh(3.d00*aux1/npdb)))
              y(i)=3.d00*(7.d00*sinh(aux1/npdb)+3.d00*sinh(3.d00*aux1/npdb))
              y(i)=y(i)*(4.d00*cosh(2.d00*aux1/npdb)+cosh(4.d00*aux1/npdb)+3.d00)
              y(i)=y(i)-4.d00*(sinh(2.d00*aux1/npdb)-2.d00*sinh(4.d00*aux1/npdb))*(3.d00*cosh(aux1/npdb)+cosh(3.d00*aux1/npdb))
              y(i)=y(i)/(3.d00*cosh(aux1/npdb)+cosh(3.d00*aux1/npdb))**3
            end do
            u=12.d00*u
            y=96.d00*y
        end if
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
        !Para calcular las energías
        do j=1, npmax
          ak=ak + u(j)*sin( dble(modo*j)*pi/npdb )
          akp=akp + y(j)*sin( dble(modo*j)*pi/npdb )
        end do

        !ak=ak*sqrt(2.d00/npdb)!Estas dos líneas habilitarlas solo si guardas los modos y no las coordenadas.
        !akp=akp*sqrt(2.d00/npdb)

        ek=akp*akp + omega2*ak*ak
        ek=ek/npdb!Si guardas modos, cambia por 0.5d00*ek
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
        open(10, file=name)
          write(10,fmt=1050) t
          write(10,fmt=1050) u
          write(10,fmt=1050) ek
        close(10)

1050  format(1pe13.6)
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
        write(*,*) 'Total: ', ktot/kpaso, ' pasos.'
!       Paso temporal
        do kk=1,ktot
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
          !Runge-Kutta 4º Orden
          call u_p(y,up)
          call y_p(u,yp)
          k1u=dt*up
          k1y=dt*yp
          
          call u_p(y+k1y*0.5d00,up)
          call y_p(u+k1u*0.5d00,yp)
          k2u=dt*up
          k2y=dt*yp
          
          call u_p(y+k2y*0.5d00,up)
          call y_p(u+k2u*0.5d00,yp)
          k3u=dt*up
          k3y=dt*yp
          
          call u_p(y+k3y,up)
          call y_p(u+k3u,yp)
          k4u=dt*up
          k4y=dt*yp

          u=u+k1u/6.d00 + k2u/3.d00 + k3u/3.d00 + k4u/6.d00
          y=y+k1y/6.d00 + k2y/3.d00 + k3y/3.d00 + k4y/6.d00

          u(0)=0.d00
          y(0)=0.d00
          u(npmax+1)=0.d00
          y(npmax+1)=0.d00
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        !Guardamos
          if (mod(kk,kpaso)==0) then
            !.........................
            !Reinicio los acumuladores
            ak=0.d00
            akp=0.d00

            !Para calcular las energías
            do j=1, npmax
              ak=ak + u(j)*sin( dble(j)*pi/npdb )
              akp=akp + y(j)*sin( dble(j)*pi/npdb )
            end do
            
            !ak=ak*sqrt(2.d00/npdb)!Estas dos líneas habilitarlas solo si guardas los modos y no las coordenadas.
            !akp=akp*sqrt(2.d00/npdb)
            
            ek=akp*akp + omega2*ak*ak
            ek=ek/npdb!Si guardas modos, cambia por 0.5d00*ek
            !.................
            kcuenta=kcuenta+1
            t=kk*dt
            open(10, file=name, access='append')
              write(10,fmt=1050) t
              write(10,fmt=1050) u
              write(10,fmt=1050) ek
            close(10)
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
            !Para llevar el ritmo.
            if (mod(kcuenta, 300)==0) then
              write(*,*) 'Procesado ', int(dble(kcuenta*kpaso*100)/dble(ktot)), ' %.'
            end if
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
          end if
        end do
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        print *, char(7)!Pitido de aviso.
        write(*,*) 'Todo acabado, tenga un buen dia.'
        stop
        end program Solitones
!========================================================================================================
!       Esta subrutina calculará y punto.
        subroutine y_p(u, yp)
!       
        use def_precision
!       
        implicit none
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        integer(kind=mi_entero), parameter :: npmax=32
!
        real (kind=mi_doble), dimension(0:npmax+1), intent(in) :: u !Entrada
        real (kind=mi_doble), dimension(0:npmax+1), intent(out) :: yp!Salida
!
        integer(kind=mi_entero) :: i
        real (kind=mi_doble), parameter :: alfa=0.25d00
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        !Para evitar los problemas de rango de partículas.
        yp(0)=u(1)*(1.d00+alfa*u(1))
        yp(npmax+1)=u(npmax)*(1.d00-alfa*u(npmax))

        do i=1,npmax
          yp(i)=(u(i+1)+u(i-1)-2.d00*u(i))*(1.d00+alfa*(u(i+1)-u(i-1)))
        end do
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        return
        end subroutine y_p
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!       Esta subrutina calculará x punto.
        subroutine u_p(y, up)
!
        use def_precision
!
        implicit none
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        integer(kind=mi_entero), parameter :: npmax=32
! 
        real (kind=mi_doble), dimension(0:npmax+1), intent(in) :: y !Entrada
        real (kind=mi_doble), dimension(0:npmax+1), intent(out) :: up!Salida
!
!        integer(kind=mi_entero) :: i
!        real (kind=mi_doble), parameter :: alfa=0.25d00
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        up=y
!         -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
        return
        end subroutine u_p
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        character(len=6) function str(k)
!       "Convierte entero en string."

        use def_precision

        implicit none
        
        integer(kind=mi_entero), intent(in) :: k
        write (str, fmt=1212) k
        str = adjustl(str)
1212  format(i6)
        end function str
!                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~